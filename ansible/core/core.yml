version: "3.6"

services:
  traefik:
    restart: unless-stopped
    image: "traefik:2.6"
    container_name: traefik
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.certResolver=myresolver"
      - "--certificatesresolvers.myresolver.acme.storage=/etc/traefik/acme/acme.json"
      - "--certificatesResolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesResolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      #- "--certificatesResolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesResolvers.myresolver.acme.dnsChallenge=true"
      - "--certificatesResolvers.myresolver.acme.dnschallenge.provider=${DNS_CHALLENGE_PROVIDER}"
      - "--certificatesResolvers.myresolver.acme.dnschallenge.resolvers=8.8.4.4:53,8.8.8.8:53"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.delayBeforeCheck=0"
      - --api.dashboard=true
      - --providers.docker.constraints=Label(`my.zone`, `zone1`)
    ports:
      - "80:80"
      - "443:443"
    networks:
      vlan20:
        ipv4_address: 192.168.20.66
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATADIR}/traefik/acme:/etc/traefik/acme
    labels:
      my.zone: zone1
      traefik.enable: true
      traefik.http.routers.traefik.entrypoints: web
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.domains[0].main: ${SERVER_DOMAIN}
      traefik.http.routers.traefik.tls.domains[0].sans: "*.${SERVER_DOMAIN}"
      traefik.http.routers.dashboard.rule: Host(`traefik.${SERVER_DOMAIN}`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.traefik.tls.certresolver: myresolver
      traefik.http.routers.traefik.service: api@internal
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
      traefik.http.middlewares.redirect-to-https.redirectscheme.permanent: true
      traefik.http.routers.redirs.rule: hostregexp(`{host:.+}`)
      traefik.http.routers.redirs.entrypoints: web
      traefik.http.routers.redirs.middlewares: redirect-to-https

  whoami:
    image: containous/whoami
    container_name: whoami
    restart: unless-stopped
    networks:
      - traefik
    security_opt:
      - no-new-privileges:true
    labels:
      my.zone: zone1
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`whoami.${SERVER_DOMAIN}`)
      traefik.http.routers.whoami.entrypoints: websecure
  portainer:
    image: portainer/portainer-ce:2.13.0
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATADIR}/portainer/data:/data
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik
    labels:
      my.zone: zone1
      traefik.enable: true
      traefik.http.routers.portainer.rule: Host(`portainer.${SERVER_DOMAIN}`)
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.services.portainer.loadbalancer.server.port: 9000
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true
      #- WATCHTOWER_NOTIFICATIONS=shoutrrr
      #- WATCHTOWER_NOTIFICATION_URL=pushover://shoutrrr:${PO_TOKEN}@${PO_USERKEY}
networks:
  traefik:
    name: zone1
